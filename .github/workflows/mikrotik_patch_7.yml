name: GANESHA RouterOS 7.x
on:
  # push:
  #   branches: [ "main" ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'RouterOS version, e.g.: 7.15.1, blank for latest'
        type: string
        default: ''

permissions:
  contents: write

env:
  CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
  CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}
  CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
  CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
  MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
  MIKRO_NPK_SIGN_PUBLIC_LKEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_LKEY }}

jobs:
  Set_BuildTime:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.set_buildtime.outputs.BUILD_TIME }}
    steps:
      - name: Set build time
        id: set_buildtime
        run: echo "BUILD_TIME=$(date +'%s')" >> $GITHUB_OUTPUT

  Patch_RouterOS:
    needs: Set_BuildTime
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86,arm64]
        channel: [stable]
    env:
      TZ: 'Asia/Jakarta'
      LATEST_VERSION: ""
      ARCH: ""

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Get latest routeros version
      run: |
        echo $(uname -a)
        if [ "${{ inputs.version }}" == "" ]; then
          LATEST_VERSION=$(wget -nv -O - ${{ env.LATEST_VERSION_URL }}${{ matrix.channel }} | cut -d ' ' -f1)
        else
          LATEST_VERSION=${{ inputs.version }}
        fi
        echo Latest Version:$LATEST_VERSION
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV

    - name: Get netinstall-${{ env.LATEST_VERSION }}.zip
      run: |
        sudo wget -nv -O netinstall-$LATEST_VERSION.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/netinstall-$LATEST_VERSION.zip
        sudo unzip netinstall-$LATEST_VERSION.zip
        sudo rm netinstall-$LATEST_VERSION.zip

    - name: Patch netinstall.exe
      run: |
        sudo -E python3 patch.py netinstall netinstall.exe
        sudo zip netinstall-$LATEST_VERSION.zip ./netinstall.exe

    - name: Get mikrotik-${{ env.LATEST_VERSION }}.iso
      run: |
        sudo wget -nv -O mikrotik-$LATEST_VERSION.iso https://download.mikrotik.com/routeros/$LATEST_VERSION/mikrotik-$LATEST_VERSION.iso

    - name: Patch mikrotik-${{ env.LATEST_VERSION }}.iso
      run: |
        sudo apt-get install -y mkisofs > /dev/null
        sudo mkdir ./iso 
        sudo mount -o loop,ro mikrotik-$LATEST_VERSION.iso ./iso
        sudo mkdir ./new_iso
        sudo cp -r ./iso/* ./new_iso/
        sudo rsync -a ./iso/ ./new_iso/
        sudo umount ./iso
        sudo rm -rf ./iso
        sudo rm -f mikrotik-$LATEST_VERSION.iso
        sudo mv ./new_iso/routeros-$LATEST_VERSION.npk ./
        sudo -E python3 patch.py npk routeros-$LATEST_VERSION.npk
        #sudo cp keygen.zip ./new_iso/
        NPK_FILES=$(find ./new_iso/*.npk)
        for file in $NPK_FILES; do
            sudo -E python3 npk.py sign $file $file
        done
        #sudo cp routeros-$LATEST_VERSION.npk ./new_iso/
        #sudo -E python3 npk.py create ./new_iso/gps-$LATEST_VERSION.npk ./option-$LATEST_VERSION.npk option ./option.sfs -desc="busybox and ash"
        #sudo cp option-$LATEST_VERSION.npk ./new_iso/
        #sudo -E python3 npk.py create ./new_iso/gps-$LATEST_VERSION.npk ./python3-$LATEST_VERSION.npk python3 ./python3.sfs -desc="python 3.11.9"
        #sudo cp python3-$LATEST_VERSION.npk ./new_iso/
        sudo cp linux ./new_iso/isolinux/
        sudo mkdir ./efiboot
        sudo mount -o loop ./new_iso/efiboot.img ./efiboot
        sudo cp linux ./efiboot/linux.x86_64
        sudo umount ./efiboot
        sudo rm -rf ./efiboot
        sudo mkisofs -o mikrotik-$LATEST_VERSION.iso \
                    -V "MikroTik $LATEST_VERSION Patched" \
                    -sysid "" -preparer "MiKroTiK" \
                    -publisher "" -A "MiKroTiK RouterOS" \
                    -b isolinux/isolinux.bin \
                    -c isolinux/boot.cat \
                    -no-emul-boot \
                    -boot-load-size 4 \
                    -boot-info-table \
                    -eltorito-alt-boot \
                    -e efiboot.img \
                    -no-emul-boot \
                    -R -J \
                    ./new_iso

        cd ./new_iso
        sudo zip ../all_packages-x86-$LATEST_VERSION.zip *.npk
        cd ..

    - name: Get install-image-${{ env.LATEST_VERSION }}.img
      run: |
        sudo wget -nv -O install-image-$LATEST_VERSION.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/install-image-$LATEST_VERSION.zip
        sudo unzip install-image-$LATEST_VERSION.zip
        sudo rm install-image-$LATEST_VERSION.zip
        
    - name: Patch install-image-${{ env.LATEST_VERSION }}.img
      run: |
        sudo mkdir ./install
        sudo mount -o loop install-image-$LATEST_VERSION.img ./install
        sudo rm ./install/1.npk
        NPK_FILES=$(find ./install/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 npk.py sign $file $file
        done
        sudo cp routeros-$LATEST_VERSION.npk ./install/1.npk
        #sudo cp keygen.zip ./install/
        sudo cp option-$LATEST_VERSION.npk ./install/100.npk
        sudo cp python3-$LATEST_VERSION.npk ./install/101.npk
        sudo cp linux ./install/
        sudo umount ./install
        sudo rm -rf ./install
        sudo zip install-image-$LATEST_VERSION.zip ./install-image-$LATEST_VERSION.img
        sudo rm ./install-image-$LATEST_VERSION.img

    - name: Delete Release tag ${{ env.LATEST_VERSION }}
      run: |
        HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        RELEASE_INFO=$(curl -s -H $HEADER https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_VERSION)
        RELEASE_ID=$(echo $RELEASE_INFO | jq -r '.id')
        echo "Release ID: $RELEASE_ID"
        if [ "$RELEASE_ID" != "null" ]; then
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$LATEST_VERSION
            echo "Tag $LATEST_VERSION deleted successfully."
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
            echo "Release with tag $LATEST_VERSION deleted successfully."
        else
            echo "Release not found for tag: $LATEST_VERSION)"
        fi

    - name: Create Release tag ${{ env.LATEST_VERSION }}
      uses: softprops/action-gh-release@v2
      with:
        name: "MikroTik ${{ env.LATEST_VERSION }}"
        body: "MikroTik ${{ env.LATEST_VERSION }}"
        tag_name: ${{ env.LATEST_VERSION }}
        make_latest:  ${{ matrix.channel == 'stable' }}
        prerelease:  ${{ matrix.channel == 'testing' }}
        files: |
          mikrotik-${{ env.LATEST_VERSION }}.iso
          all_packages-x86-${{ env.LATEST_VERSION }}.zip
          netinstall-${{ env.LATEST_VERSION }}.zip
          install-image-${{ env.LATEST_VERSION }}.zip
          routeros-${{ env.LATEST_VERSION }}.npk

          *.EFI
